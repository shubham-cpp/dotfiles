version: 2
lint-debounce: 1s
root-markers:
  - RCS/
  - SCCS/
  - CVS/
  - .git/
  - .svn/
  - .hg/
  - .bzr/
  - _darcs/
  - .git
# command define
commands:
  - title: Reload
    command: :reload-config
  - title: Editor (notepad)
    os: windows
    command: notepad
    arguments:
      - "${FILENAME}"
  - title: Editor (gedit)
    os: linux
    command: xdg-open
    # Linux no method generic GUI editor open
    arguments:
      - "${FILENAME}"
  - title: Editor (default)
    os: darwin
    command: open
    arguments:
      - "-e"
      - "${FILENAME}"
# linter,formatter setting
tools:
  cppcheck-lint: &cppcheck-lint
    prefix: cppcheck
    lint-command: "cppcheck --quiet --force --enable=style --error-exitcode=1 ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c: %m"
    root-markers:
      - compile_commands.json
  clang-format: &clang-format
    format-command: "clang-format ${INPUT}"
    format-stdin: true
  clang-tidy: &clang-tidy
    prefix: clang-tidy
    lint-command: "clang-tidy ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c: %trror: %m"
      - "%f:%l:%c: %tarning: %m"
      - "%f:%l:%c: %tote: %m"

  vint-lint: &vint-lint
    prefix: vint
    lint-command: "vint --enable-neovim --style-problem ${INPUT}"
    lint-formats:
      - "%f:%l:%c: %m"

  markdownlint-lint: &markdownlint-lint
    prefix: markdownlint
    lint-command: "markdownlint --stdin"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c MD%n/%*[^ ] %m"
      - "%f:%l MD%n/%*[^ ] %m"
    commands:
      - title: "markdownlint fix"
        command: markdownlint
        arguments:
          - "--fix"
          - "${INPUT}"

  jsonlint-lint: &jsonlint-lint
    prefix: jsonlint
    lint-command: "jsonlint -c"
    lint-stdin: true
    lint-formats:
      - "line %l, col %c, found: %m"

  fixjson-format: &fixjson-format
    format-command: "fixjson -i 2"
    format-stdin: true

  shellcheck-lint: &shellcheck-lint
    prefix: shellcheck
    lint-command: "shellcheck -f gcc -x -"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %t%*[^:]: %m [SC%n]"

  shfmt-format: &shfmt-format
    format-command: shfmt -ln bash -i 2 -bn -ci -sr -kp
    format-stdin: true

  flake8-lint: &flake8-lint
    prefix: flake8
    lint-command: flake8 --stdin-display-name ${INPUT} -
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m"
    root-markers:
      - setup.cfg
      - tox.ini
      - .flake8

  pylint-lint: &pylint-lint
    prefix: pylint
    lint-command: "pylint --output-format=text --score=no --msg-template {path}:{line}:{column}:{C}:{msg} ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c:%t:%m"
    lint-offset-columns: 1
    lint-category-map:
      I: H
      R: I
      C: I
      W: W
      E: E
      F: E
    root-markers:
      - setup.cfg
      - .pylintrc

  mypy-lint: &mypy-lint
    prefix: mypy
    lint-command: "mypy --show-column-numbers --strict --strict-equality"
    lint-formats:
      - "%f:%l:%c: %t%*[^:]: %m"
    root-markers:
      - setup.cfg
      - mypy.ini

  black-action-format: &black-action-format
    commands:
      - title: "black format"
        command: black
        arguments:
          - "--quiet"
          - "--safe"
          - "${INPUT}"

  yapf-action-format: &yapf-action-format
    commands:
      - title: "yapf format"
        command: yapf
        arguments:
          - "-i"
          - "${INPUT}"

  pydocstyle-lint: &pydocstyle-lint
    prefix: pydocstyle
    lint-command: "pydocstyle ${INPUT}"
    lint-stdin: false
    lint-ignore-exit-code: true
    lint-formats:
      - "%I%f:%l %.%#:"
      - '%Z%*\sD%n: %m'

  yamllint-lint: &yamllint-lint
    prefix: yamllint
    lint-command: "yamllint --strict --format parsable ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c: [%t%*[a-z]] %m"
    env:
      - "PYTHONIOENCODING=UTF-8"

  actionlint-lint: &actionlint-lint
    prefix: actionlint
    lint-command: "bash -c \"[[ '${INPUT}' =~ \\\\.github/workflows/ ]]\" && actionlint -oneline -no-color -"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m"
    root-markers:
      - .github

  eslint-lint: &eslint-lint
    prefix: eslint
    lint-command: "npx --no-install eslint -f unix --stdin --stdin-filename ${INPUT}"
    lint-ignore-exit-code: true
    lint-stdin: true
    root-markers:
      # - package.json
      - .eslintrc.js
      - .eslintrc.cjs
      - .eslintrc.yaml
      - .eslintrc.yml
      - .eslintrc.json
      - .eslintrc
    commands:
      - title: "eslint fix"
        command: npx
        arguments:
          - "--no-install"
          - "eslint"
          - "--fix"
          - "${INPUT}"
  eslintd: &eslintd
    prefix: eslint_d
    lint-command: "eslint_d --no-color --format unix --stdin --stdin-filename ${INPUT}"
    # lint-formats: %f(%l,%c): %trror %m', '%f(%l,%c): %tarning %m
    lint-ignore-exit-code: true
    lint-stdin: true
    root-markers:
      # - package.json
      - .eslintrc
      - .eslintrc.js
      - .eslintrc.cjs
      - .eslintrc.yaml
      - .eslintrc.yml
      - .eslintrc.json
  eslintd-fix: &eslintd-fix
    prefix: eslint_d
    format-command: eslint_d --fix-to-stdout --stdin --stdin-filename ${INPUT}
    format-stdin: true
    commands:
      - title: "eslint_d fix"
        command: eslint_d
        arguments:
          - "--fix"
          - "${INPUT}"
    root-markers:
      # - package.json
      - .eslintrc
      - .eslintrc.js
      - .eslintrc.cjs
      - .eslintrc.yaml
      - .eslintrc.yml
      - .eslintrc.json

  stylelint-lint: &stylelint-lint
    prefix: stylelint
    lint-command: "npx --no-install stylelint --formatter unix --stdin --stdin-filename ${INPUT}"
    lint-ignore-exit-code: false
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m [%t%*[a-z]]"
    root-markers:
      - package.json
      - .stylelintrc.json
    commands:
      - title: "stylelint fix"
        command: npx
        arguments:
          - "--no-install"
          - "stylelint"
          - "--fix"
          - "${INPUT}"

  htmllint-lint: &htmllint-lint
    prefix: htmllint
    lint-command: "npx --no-install htmllint ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f: line %l, col %c, %m"
    root-markers:
      - package.json
      - .htmllintrc

  prettier-action-fix: &prettier-action-fix
    format-command: prettier --stdin --stdin-filepath '${INPUT}' ${--range-start:charStart} ${--range-end:charEnd} ${--tab-width:tabSize} ${--use-tabs:!insertSpaces}
    format-stdin: true
    format-can-range: true
    root-markers:
      - package.json
      - .prettierrc
      - .prettierrc.json
      - .prettierrc.js
      - .prettierrc.yml
      - .prettierrc.yaml
      - .prettierrc.json5
      - .prettierrc.mjs
      - .prettierrc.cjs
      - .prettierrc.toml

  prettierd: &prettierd
    format-command: prettierd ${INPUT} ${--range-start=charStart} ${--range-end=charEnd} ${--tab-width:tabSize} ${--use-tabs:!insertSpaces}
    format-stdin: true
    format-can-range: true
    root-markers:
      - package.json
      - .prettierrc
      - .prettierrc.json
      - .prettierrc.js
      - .prettierrc.yml
      - .prettierrc.yaml
      - .prettierrc.json5
      - .prettierrc.mjs
      - .prettierrc.cjs
      - .prettierrc.toml

  denofmt: &denofmt
    format-command: >
      deno fmt ${INPUT} ${--indent-width=tabSize} ${--use-tabs=!insertSpaces}
    format-stdin: false
    root-markers:
      - deno.json
  denolint: &denolint
    prefix: denolint
    lint-command: "deno lint ${INPUT}"
    lint-stdin: false
    root-markers:
      - deno.json

  fish-indent: &fish-indent
    format-command: fish_indent
    format-stdin: true
  fish: &fish
    lint-command: fish --no-execute ${INPUT}
    lint-ignore-exit-code: true
    lint-formats:
      - "%.%#(line %l): %m"

  goimports: &goimports
    format-command: goimports
    format-stdin: true
  golines: &golines
    format-command: golines
    format-stdin: true
  golangci-lint: &golangci-lint
    prefix: golangci-lint
    lint-command: golangci-lint run --color never --out-format tab ${INPUT}
    lint-stdin: false
    lint-formats:
      - "%.%#:%l:%c %m"

  stylua: &stylua
    format-command: stylua ${--indent-width:tabSize} ${--range-start:charStart} ${--range-end:charEnd} --color Never -
    format-stdin: true
    format-can-range: true

# languages setting
languages:
  c:
    - <<: *cppcheck-lint
    - <<: *clang-tidy
    - <<: *clang-format
  cpp:
    - <<: *cppcheck-lint
    - <<: *clang-tidy
    - <<: *clang-format
  sh:
    - <<: *shellcheck-lint
    - <<: *shfmt-format
  fish:
    - <<: *fish
    - <<: *fish-indent
  python:
    - <<: *flake8-lint
    - <<: *black-action-format
  lua:
    - <<: *stylua
  markdown:
    - <<: *markdownlint-lint
    - <<: *prettier-action-fix
  html:
    - <<: *htmllint-lint
    - <<: *stylelint-lint
    - <<: *prettier-action-fix
  css:
    - <<: *prettierd
  scss:
    - <<: *stylelint-lint
    - <<: *prettierd
  sass:
    - <<: *stylelint-lint
    - <<: *prettierd
  less:
    - <<: *stylelint-lint
    - <<: *prettierd
  json:
    - <<: *jsonlint-lint
    - <<: *fixjson-format
  jsonc:
    - <<: *jsonlint-lint
    - <<: *fixjson-format
  json5:
    - <<: *jsonlint-lint
    - <<: *fixjson-format
  yaml:
    - <<: *yamllint-lint
    - <<: *prettier-action-fix
  javascript:
    - <<: *prettier-action-fix
    - <<: *eslintd-fix
    - <<: *eslintd
  typescript:
    - <<: *prettier-action-fix
    - <<: *eslintd-fix
    - <<: *eslintd
  javascriptreact:
    - <<: *prettier-action-fix
    - <<: *eslintd-fix
    - <<: *eslintd
  typescriptreact:
    - <<: *prettier-action-fix
    - <<: *eslintd-fix
    - <<: *eslintd
  vue:
    - <<: *prettier-action-fix
    - <<: *eslintd-fix
    - <<: *eslintd
  svelte:
    - <<: *prettier-action-fix
    # - <<: *prettierd
    # - <<: *eslintd-fix
    # - <<: *eslintd

  graphql:
    - <<: *prettier-action-fix
  go:
    - <<: *golangci-lint
    - <<: *goimports
    - <<: *golines

  vim:
    - <<: *vint-lint
